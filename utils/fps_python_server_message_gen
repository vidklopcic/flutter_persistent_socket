#!/usr/bin/python3

import argparse
import sys
import re
import os


class MessageGen():
    def __init__(self, path, spec, proto):
        self.path = path
        self.proto = proto.strip()
        self.spec = spec.strip()
        self.spec_items = [i.strip() for i in self.spec.split('\n') if i.strip()]
        self.package = self.path.split(".proto")[0].split("/")[-1]

    def get_type(self):
        return re.search('type.+=.+\'(.+)\'', self.spec).group(1)

    def get_import(self):
        return 'from proto.%s import *' % self.package

    def get_server_prefix(self):
        if 'client' in re.search('origin.+=(.+)', self.spec).group(1):
            return 'Rx'
        else:
            return 'Tx'

    def get_server_message_classname(self):
        return self.get_server_prefix() + self.proto

    def is_auth_required(self):
        auth = re.search('auth\s*=\s*(.+)\s*', self.spec)
        if auth:
            return auth.group(1).capitalize()
        else:
            return 'True'

    def permissions(self):
        permissions = ('')

    def get_server_message(self) -> str:
        message = '''

class {prefix}{proto}({prefix}Message):
    type = '{type}'
    proto = {proto}
    auth_required = {auth}
    permissions = [{permissions}]
'''.format(prefix=self.get_server_prefix(), proto=self.proto, type=self.get_type(), auth=self.is_auth_required(), permissions=self.permissions())

        return message

    def __str__(self):
        return self.proto + ' (' + self.path + ')'


args = argparse.ArgumentParser(description='Generate message objects from proto and docstring specs.')
args.add_argument(type=str, nargs='+', dest='protos', help='list of proto files')
params = args.parse_args(sys.argv[1:])

generators = []
for f in params.protos:
    proto_content = open(f, 'r', encoding='utf-8').read()
    generators += [MessageGen(f, i[0], i[1]) for i in
                   re.findall('/\*(.+?)\*/\nmessage(.+?){', proto_content, flags=re.S)]

imports = {'from abc import ABC', 'import dataclasses', 'from betterproto import *'}
imports.update(set([i.get_import() for i in generators]))

with open('proto/messages.py', 'w', encoding='utf-8') as f:
    f.write('\n'.join(imports))
    f.write('''


class RxMessageData:
    def __init__(self, json_data: dict):
        self.headers = json_data.get('headers')
        self.body = json_data.get('body')
        self.apiVersion = self.headers.get('apiVersion')
        self.authHeader = self.headers.get('authHeader')
        self.ack = self.headers.get('ack')
        self.uuid = self.headers.get('uuid')
        self.type = self.headers.get('messageType')
        self.retryCount = self.headers.get('retryCount', 0)


class RxMessage(ABC):
    proto = None
    type = None
    auth_required = True

    def __init__(self, data: RxMessageData, user=None):
        self.data = data
        self.set_data(data)
        self.user = user

    def set_data(self, data: RxMessageData):
        self.proto = self.proto().from_dict(data.body)

class TxMessage(ABC):
    proto: betterproto.Message = None
    type: str = None

    def __init__(self, proto=None):
        self.fields = {}
        if proto is not None:
            assert type(proto) is self.proto
            self.proto = proto
        else:
            self.proto = self.proto()

    def get_message(self) -> dict:
        return {
            'headers': {
                'messageType': self.type,
            },
            'body': self.proto.to_dict()
        }

def init_default_gen_patch(self):
    default_gen = {}

    for field in dataclasses.fields(self.cls):
        meta = FieldMetadata.get(field)
        if meta.proto_type == TYPE_MESSAGE:
            default_gen[field.name] = self.cls._get_field_default_gen(field, meta)
        else:
            default_gen[field.name] = lambda: None

    self.default_gen = default_gen

betterproto.ProtoClassMetadata.init_default_gen = init_default_gen_patch
''')

    for generator in generators:
        try:
            f.write(generator.get_server_message())
        except Exception as e:
            print('Syntax error:', generator)
            print(e)
